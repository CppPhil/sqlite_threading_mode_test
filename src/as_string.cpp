#include "sqlite3.h"

#include "as_string.hpp"

namespace sqlite {
const char* asString(int resultCode)
{
    switch (resultCode) {
    case SQLITE_OK:
        return "OK";
    case SQLITE_ERROR:
        return "ERROR";
    case SQLITE_INTERNAL:
        return "INTERNAL";
    case SQLITE_PERM:
        return "PERM";
    case SQLITE_ABORT:
        return "ABORT";
    case SQLITE_BUSY:
        return "BUSY";
    case SQLITE_LOCKED:
        return "LOCKED";
    case SQLITE_NOMEM:
        return "NOMEM";
    case SQLITE_READONLY:
        return "READONLY";
    case SQLITE_INTERRUPT:
        return "INTERRUPT";
    case SQLITE_IOERR:
        return "IOERR";
    case SQLITE_CORRUPT:
        return "CORRUPT";
    case SQLITE_NOTFOUND:
        return "NOTFOUND";
    case SQLITE_FULL:
        return "FULL";
    case SQLITE_CANTOPEN:
        return "CANTOPEN";
    case SQLITE_PROTOCOL:
        return "PROTOCOL";
    case SQLITE_EMPTY:
        return "EMPTY";
    case SQLITE_SCHEMA:
        return "SCHEMA";
    case SQLITE_TOOBIG:
        return "TOOBIG";
    case SQLITE_CONSTRAINT:
        return "CONSTRAINT";
    case SQLITE_MISMATCH:
        return "MISMATCH";
    case SQLITE_MISUSE:
        return "MISUSE";
    case SQLITE_NOLFS:
        return "NOLFS";
    case SQLITE_AUTH:
        return "AUTH";
    case SQLITE_FORMAT:
        return "FORMAT";
    case SQLITE_RANGE:
        return "RANGE";
    case SQLITE_NOTADB:
        return "NOTADB";
    case SQLITE_NOTICE:
        return "NOTICE";
    case SQLITE_WARNING:
        return "WARNING";
    case SQLITE_ROW:
        return "ROW";
    case SQLITE_DONE:
        return "DONE";
    case SQLITE_ERROR_MISSING_COLLSEQ:
        return "ERROR_MISSING_COLLSEQ";
    case SQLITE_ERROR_RETRY:
        return "ERROR_RETRY";
    case SQLITE_ERROR_SNAPSHOT:
        return "ERROR_SNAPSHOT";
    case SQLITE_IOERR_READ:
        return "IOERR_READ";
    case SQLITE_IOERR_SHORT_READ:
        return "IOERR_SHORT_READ";
    case SQLITE_IOERR_WRITE:
        return "IOERR_WRITE";
    case SQLITE_IOERR_FSYNC:
        return "IOERR_FSYNC";
    case SQLITE_IOERR_DIR_FSYNC:
        return "IOERR_DIR_FSYNC";
    case SQLITE_IOERR_TRUNCATE:
        return "IOERR_TRUNCATE";
    case SQLITE_IOERR_FSTAT:
        return "IOERR_FSTAT";
    case SQLITE_IOERR_UNLOCK:
        return "IOERR_UNLOCK";
    case SQLITE_IOERR_RDLOCK:
        return "IOERR_RDLOCK";
    case SQLITE_IOERR_DELETE:
        return "IOERR_DELETE";
    case SQLITE_IOERR_BLOCKED:
        return "IOERR_BLOCKED";
    case SQLITE_IOERR_NOMEM:
        return "IOERR_NOMEM";
    case SQLITE_IOERR_ACCESS:
        return "IOERR_ACCESS";
    case SQLITE_IOERR_CHECKRESERVEDLOCK:
        return "IOERR_CHECKRESERVEDLOCK";
    case SQLITE_IOERR_LOCK:
        return "IOERR_LOCK";
    case SQLITE_IOERR_CLOSE:
        return "IOERR_CLOSE";
    case SQLITE_IOERR_DIR_CLOSE:
        return "IOERR_DIR_CLOSE";
    case SQLITE_IOERR_SHMOPEN:
        return "IOERR_SHMOPEN";
    case SQLITE_IOERR_SHMSIZE:
        return "IOERR_SHMSIZE";
    case SQLITE_IOERR_SHMLOCK:
        return "IOERR_SHMLOCK";
    case SQLITE_IOERR_SHMMAP:
        return "IOERR_SHMMAP";
    case SQLITE_IOERR_SEEK:
        return "IOERR_SEEK";
    case SQLITE_IOERR_DELETE_NOENT:
        return "IOERR_DELETE_NOENT";
    case SQLITE_IOERR_MMAP:
        return "IOERR_MMAP";
    case SQLITE_IOERR_GETTEMPPATH:
        return "IOERR_GETTEMPPATH";
    case SQLITE_IOERR_CONVPATH:
        return "IOERR_CONVPATH";
    case SQLITE_IOERR_VNODE:
        return "IOERR_VNODE";
    case SQLITE_IOERR_AUTH:
        return "IOERR_AUTH";
    case SQLITE_IOERR_BEGIN_ATOMIC:
        return "IOERR_BEGIN_ATOMIC";
    case SQLITE_IOERR_COMMIT_ATOMIC:
        return "IOERR_COMMIT_ATOMIC";
    case SQLITE_IOERR_ROLLBACK_ATOMIC:
        return "IOERR_ROLLBACK_ATOMIC";
    case SQLITE_IOERR_DATA:
        return "IOERR_DATA";
    case SQLITE_IOERR_CORRUPTFS:
        return "IOERR_CORRUPTFS";
    case SQLITE_LOCKED_SHAREDCACHE:
        return "LOCKED_SHAREDCACHE";
    case SQLITE_LOCKED_VTAB:
        return "LOCKED_VTAB";
    case SQLITE_BUSY_RECOVERY:
        return "BUSY_RECOVERY";
    case SQLITE_BUSY_SNAPSHOT:
        return "BUSY_SNAPSHOT";
    case SQLITE_BUSY_TIMEOUT:
        return "BUSY_TIMEOUT";
    case SQLITE_CANTOPEN_NOTEMPDIR:
        return "CANTOPEN_NOTEMPDIR";
    case SQLITE_CANTOPEN_ISDIR:
        return "CANTOPEN_ISDIR";
    case SQLITE_CANTOPEN_FULLPATH:
        return "CANTOPEN_FULLPATH";
    case SQLITE_CANTOPEN_CONVPATH:
        return "CANTOPEN_CONVPATH";
    case SQLITE_CANTOPEN_DIRTYWAL:
        return "CANTOPEN_DIRTYWAL";
    case SQLITE_CANTOPEN_SYMLINK:
        return "CANTOPEN_SYMLINK";
    case SQLITE_CORRUPT_VTAB:
        return "CORRUPT_VTAB";
    case SQLITE_CORRUPT_SEQUENCE:
        return "CORRUPT_SEQUENCE";
    case SQLITE_CORRUPT_INDEX:
        return "CORRUPT_INDEX";
    case SQLITE_READONLY_RECOVERY:
        return "READONLY_RECOVERY";
    case SQLITE_READONLY_CANTLOCK:
        return "READONLY_CANTLOCK";
    case SQLITE_READONLY_ROLLBACK:
        return "READONLY_ROLLBACK";
    case SQLITE_READONLY_DBMOVED:
        return "READONLY_DBMOVED";
    case SQLITE_READONLY_CANTINIT:
        return "READONLY_CANTINIT";
    case SQLITE_READONLY_DIRECTORY:
        return "READONLY_DIRECTORY";
    case SQLITE_ABORT_ROLLBACK:
        return "ABORT_ROLLBACK";
    case SQLITE_CONSTRAINT_CHECK:
        return "CONSTRAINT_CHECK";
    case SQLITE_CONSTRAINT_COMMITHOOK:
        return "CONSTRAINT_COMMITHOOK";
    case SQLITE_CONSTRAINT_FOREIGNKEY:
        return "CONSTRAINT_FOREIGNKEY";
    case SQLITE_CONSTRAINT_FUNCTION:
        return "CONSTRAINT_FUNCTION";
    case SQLITE_CONSTRAINT_NOTNULL:
        return "CONSTRAINT_NOTNULL";
    case SQLITE_CONSTRAINT_PRIMARYKEY:
        return "CONSTRAINT_PRIMARYKEY";
    case SQLITE_CONSTRAINT_TRIGGER:
        return "CONSTRAINT_TRIGGER";
    case SQLITE_CONSTRAINT_UNIQUE:
        return "CONSTRAINT_UNIQUE";
    case SQLITE_CONSTRAINT_VTAB:
        return "CONSTRAINT_VTAB";
    case SQLITE_CONSTRAINT_ROWID:
        return "CONSTRAINT_ROWID";
    case SQLITE_CONSTRAINT_PINNED:
        return "CONSTRAINT_PINNED";
    case SQLITE_CONSTRAINT_DATATYPE:
        return "CONSTRAINT_DATATYPE";
    case SQLITE_NOTICE_RECOVER_WAL:
        return "NOTICE_RECOVER_WAL";
    case SQLITE_NOTICE_RECOVER_ROLLBACK:
        return "NOTICE_RECOVER_ROLLBACK";
    case SQLITE_NOTICE_RBU:
        return "NOTICE_RBU";
    case SQLITE_WARNING_AUTOINDEX:
        return "WARNING_AUTOINDEX";
    case SQLITE_AUTH_USER:
        return "AUTH_USER";
    case SQLITE_OK_LOAD_PERMANENTLY:
        return "OK_LOAD_PERMANENTLY";
    case SQLITE_OK_SYMLINK:
        return "OK_SYMLINK";
    default:
        break;
    }

    return "UNKNOWN_RESULT_CODE";
}
} // namespace sqlite
